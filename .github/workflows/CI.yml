name: CI

permissions:
  contents: read
  id-token: write  # only if you're using OIDC
  pull-requests: read  # only if needed for PR jobs

on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  workflow_dispatch:
    inputs:
      vault_name:
        description: 'Name of the Recovery Services Vault'
        required: false
        default: 'my-recovery-vault'
        

jobs:
  terraform-format:
    name: Terraform Format
    runs-on: ubuntu-latest
    # environment: production
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init 
        
      - name: Terraform Format
        run: terraform fmt -check -recursive

  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    # environment: production
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init 
        
      - name: Terraform Validate
        run: terraform validate

  terraform-tfsec:
    name: Terraform TfSec Scanning
    runs-on: ubuntu-latest
    # environment: production
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init 
        
      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0

  terraform-checkov:
    name: Terraform Checkov Scanning
    runs-on: ubuntu-latest
    # environment: production
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init 
        
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: terraform

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [
      terraform-format,
      terraform-validate,
      terraform-tfsec,
      terraform-checkov
    ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init      
              
      - name: Terraform Plan                
        run: terraform plan -out=plan.out

      - name: Upload plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: plan.out

  checkov:
    needs: plan
    runs-on: ubuntu-latest
    needs: terraform-plan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: .

      - name: Convert to JSON
        run: terraform show -json plan.out > tfplan.json

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          file: tfplan.json

  # compliance:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Install dependencies
  #       run: |
  #         sudo apt-get install jq curl

  #     - name: Fetch plan JSON from TFC
  #       env:
  #         TFC_TOKEN: ${{ secrets.TF_API_TOKEN }}
  #         TFC_ORG: SivajiRaavi
  #         TFC_WORKSPACE: azure-recovery-services-vault-dev
  #       run: |
  #         # Get workspace ID
  #         WORKSPACE_ID=$(curl -s \
  #           --header "Authorization: Bearer $TFC_TOKEN" \
  #           https://app.terraform.io/api/v2/organizations/$TFC_ORG/workspaces/$TFC_WORKSPACE \
  #           | jq -r '.data.id')

  #         # Get latest run ID
  #         RUN_ID=$(curl -s \
  #           --header "Authorization: Bearer $TFC_TOKEN" \
  #           https://app.terraform.io/api/v2/workspaces/$WORKSPACE_ID/runs \
  #           | jq -r '.data[0].id')

  #         # Get plan ID
  #         PLAN_ID=$(curl -s \
  #           --header "Authorization: Bearer $TFC_TOKEN" \
  #           https://app.terraform.io/api/v2/runs/$RUN_ID \
  #           | jq -r '.data.relationships.plan.data.id')

  #         # Get the JSON plan download URL
  #         PLAN_JSON_URL=$(curl -s \
  #           --header "Authorization: Bearer $TFC_TOKEN" \
  #           https://app.terraform.io/api/v2/plans/$PLAN_ID/json-output \
  #           | jq -r '.data.attributes."hosted-json-url"')

  #         # Download JSON plan
  #         curl -s -H "Authorization: Bearer $TFC_TOKEN" "$PLAN_JSON_URL" -o tfplan.json

  #     - name: Run terraform-compliance
  #       run: |
  #         docker run --rm \
  #           -v ${{ github.workspace }}:/target \
  #           eerkunt/terraform-compliance \
  #           -p /target/tfplan.json \
  #           -f /target/features
